package k7i3.code.tnc.transport;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;

import java.util.HashMap;

/**
 * Created by k7i3 on 07.12.15.
 */
//TODO example https://github.com/googleanalytics/cute-pets-example-android-app/tree/master/app/src/main/java/com/example/cutepets
public class AnalyticsApplication extends com.activeandroid.app.Application {
    private static final String PROPERTY_ID = "UA-71106277-1";
    /**
     * The Analytics singleton. The field is set in onCreate method override when the application
     * class is initially created.
     */
    private static GoogleAnalytics analytics;

    private static HashMap<TrackerName, Tracker> trackers = new HashMap<>();

    public AnalyticsApplication() {
        super();
    }

    @Override
    public void onCreate() {
        super.onCreate();
        analytics = GoogleAnalytics.getInstance(this);
//        instead of GoogleAnalytics.getInstance(this).reportActivityStart(this) + GoogleAnalytics.getInstance(this).reportActivityStop(this) (at onStart and onStop)
//        tracker mast have <bool name="ga_autoActivityTracking">true</bool>
        analytics.enableAutoActivityReports(this);
        //init for start AutoActivityTracking
        getTracker(TrackerName.PROGRAMMATICALLY_APP_TRACKER);
    }

    /**
     * Enum used to identify the tracker that needs to be used for tracking.
     *
     * A single tracker is usually enough for most purposes. In case you do need multiple trackers,
     * storing them all in Application object helps ensure that they are created only once per
     * application instance.
     */
    public enum TrackerName {
        GLOBAL_TRACKER, // Configuration based on default xml (R.xml.global_tracker)
        DEFAULT_TRACKER, // analytics().newTracker(PROPERTY_ID)
        XML_APP_TRACKER, // Configuration based on custom xml (R.xml.app_tracker)
        PROGRAMMATICALLY_APP_TRACKER // Configuration based on programmatically settings
    }

    synchronized public Tracker getTracker(TrackerName trackerId) {
        if (!trackers.containsKey(trackerId)) {
            Tracker tracker;
            switch (trackerId) {
                case GLOBAL_TRACKER:
                    // To enable debug logging use: adb shell setprop log.tag.GAv4 DEBUG
                    tracker = analytics().newTracker(R.xml.global_tracker);
                    break;
                case DEFAULT_TRACKER:
                    tracker = analytics().newTracker(PROPERTY_ID);
                    break;
                case XML_APP_TRACKER:
                    tracker = analytics().newTracker(R.xml.app_tracker);
                    break;
                // case PROGRAMMATICALLY_APP_TRACKER:
                default:
                    tracker = analytics().newTracker(PROPERTY_ID);
                    // Enable automatic activity tracking for your app
                    tracker.enableAutoActivityTracking(true);
                    // Provide unhandled exceptions reports. Do that first after creating the tracker
                    tracker.enableExceptionReporting(true);
                    // Enable Remarketing, Demographics & Interests reports
                    // https://developers.google.com/analytics/devguides/collection/android/display-features
                    tracker.enableAdvertisingIdCollection(true);
                    //Percentage of events to include in reports
                    //Set the sample rate for all hits generated by the app. The sampling is done at app level. The default value is 100. To enable sampling, the minimum rate required is 0.01%.
                    tracker.setSampleRate(100);
                    //How long a session exists before giving up
                    //Specify the time (in seconds) an app can stay in the background before a new session is started. Setting this to a negative number will result in a new session never being started. Default is 30 seconds.
                    tracker.setSessionTimeout(-1);
                    // for ping??? no, working without it to
//                    tracker.send(new HitBuilders.ScreenViewBuilder().setCustomDimension(1, null).build());
                    break;
            }
            trackers.put(trackerId, tracker);
        }
        return trackers.get(trackerId);
    }

    /**
     * Access to the global Analytics singleton. If this method returns null you forgot to either
     * set android:name="&lt;this.class.name&gt;" attribute on your application element in
     * AndroidManifest.xml or you are not setting this.analytics field in onCreate method override.
     */
    public static GoogleAnalytics analytics() {
        return analytics;
    }
}
